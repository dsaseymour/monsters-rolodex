{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbar/searchbar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBar","placeholder","handleChange","type","onChange","App","useState","setMonsters","searchquery","setSearchQuery","useEffect","fetch","then","response","json","users","catch","error","console","log","filteredMonsters","filter","monsterrecord","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,uBAChF,oBAA2BC,KAAMN,EAAMG,QAAQG,KAA/C,SAAsDN,EAAMG,QAAQG,MAA3DN,EAAMG,QAAQC,IACvB,4BAAIJ,EAAMG,QAAQI,aCHbC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAACP,GAEjB,OAAO,cAAC,EAAD,CAAMA,QAASA,EAAf,cAA8BA,EAAQC,UCN/CO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2BHG,MA/Bf,WAAgB,IAAD,EAEkBC,mBAC7B,IAHW,mBAENR,EAFM,KAEGS,EAFH,OAMsBD,mBAAS,KAN/B,mBAMNE,EANM,KAMMC,EANN,KAQbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACHR,EAAYQ,MAEfC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,IAEH,IAEMG,EAAiBtB,EAASuB,QAAO,SAACC,GAAD,OAAkBA,EAAc3B,KAAK4B,cAAcC,SAAShB,EAAYe,kBAC/G,OACE,sBAAKjC,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,8BACA,cAAC,EAAD,CAAWW,YAAY,sBAAsBC,aAN7B,SAACuB,GAAMhB,EAAegB,EAAEC,OAAOC,UAQ/C,cAAC,EAAD,CAAU7B,SAAUsB,QCjBXQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.52d92501.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\" >\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=220x220`} alt=\"Picture of a Robot\"/>\r\n        <h1 key={props.monster.id} name={props.monster.name}>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {\r\n            props.monsters.map((monster) => \r\n            {\r\n               return <Card monster={monster}  key={monster.id}> </Card>\r\n            }\r\n            )\r\n        }      \r\n    </div>\r\n);","import React from \"react\";\r\nimport \"./searchbar.styles.css\";\r\n\r\nexport const SearchBar = ({placeholder, handleChange}) => (\r\n        <input \r\n        className=\"search\"\r\n        type=\"search\" \r\n        placeholder={placeholder}  \r\n        onChange={handleChange}\r\n        ></input>\r\n);","import './App.css';\r\nimport { useState,useEffect} from \"react\";\r\nimport {CardList} from './components/card-list/card-list.component';\r\nimport {SearchBar} from './components/searchbar/searchbar.component';\r\nfunction App() {\r\n\r\n  const [monsters,setMonsters] = useState(\r\n    []\r\n  );\r\n\r\n  const [searchquery,setSearchQuery]=useState(\" \");\r\n\r\n  useEffect(()=>{\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then((users) => {\r\n          setMonsters(users);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n  const handleChange= (e)=>{ setSearchQuery(e.target.value) };\r\n\r\n  const filteredMonsters=monsters.filter((monsterrecord)=> monsterrecord.name.toLowerCase().includes(searchquery.toLowerCase()));\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"AppName\" >Monsters Rolodex</h1>\r\n      <SearchBar placeholder=\"Search For Monsters\" handleChange={handleChange} >\r\n      </SearchBar>\r\n      <CardList monsters={filteredMonsters} > \r\n      </CardList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}